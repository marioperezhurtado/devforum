// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Community {
    name        String   @id
    description String   @db.VarChar(150)
    color       String   @db.VarChar(6)
    createdAt   DateTime @default(now())
    creatorId   String
    creator     User     @relation(fields: [creatorId], references: [id])
    members     User[]   @relation("CommunityMembers")
    posts       Post[]

    @@index([creatorId])
}

model Topic {
    name      String   @id
    createdAt DateTime @default(now())
    posts     Post[]   @relation("PostTopics")
    followers User[]   @relation("UserFollowingTopics")

    @@index([name])
}

enum PostCategory {
    discussions
    news
    help
    jobs
    showcase
    tutorials
    resources
    others
}

model Post {
    id            String         @id @default(cuid())
    title         String         @db.VarChar(100)
    content       String         @db.VarChar(1000)
    createdAt     DateTime       @default(now())
    creatorId     String
    communityName String
    category      PostCategory
    demoUrl       String?
    githubUrl     String?
    discordUrl    String?
    twitterUrl    String?
    redditUrl     String?
    youtubeUrl    String?
    creator       User           @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    community     Community      @relation(fields: [communityName], references: [name], onDelete: Cascade)
    topics        Topic[]        @relation("PostTopics")
    comments      Comment[]
    reactions     PostReaction[]
    codeSnippets  CodeSnippet[]

    @@index([creatorId])
    @@index([communityName])
}

model Comment {
    id        String            @id @default(cuid())
    content   String            @db.VarChar(500)
    createdAt DateTime          @default(now())
    creatorId String
    postId    String
    replyToId String?
    creator   User              @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    post      Post              @relation(fields: [postId], references: [id], onDelete: Cascade)
    reactions CommentReaction[]

    @@index([creatorId])
    @@index([postId])
}

model PostReaction {
    id        String   @id @default(cuid())
    vote      Boolean
    createdAt DateTime @default(now())
    creatorId String
    postId    String
    creator   User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@unique([creatorId, postId], name: "postReactionCreatorIdPostId")
    @@index([creatorId])
    @@index([postId])
}

model CommentReaction {
    id        String   @id @default(cuid())
    vote      Boolean
    createdAt DateTime @default(now())
    creatorId String
    commentId String
    creator   User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
    comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

    @@unique([creatorId, commentId], name: "commentReactionCreatorIdCommentId")
    @@index([creatorId])
    @@index([commentId])
}

enum Language {
    JavaScript
    TypeScript
    Python
    Go
    Rust
    Java
    C
    Cpp
    CSharp
    JSX
    TSX
}

model CodeSnippet {
    id        String   @id @default(cuid())
    filename  String   @db.VarChar(100)
    code      String   @db.VarChar(1000)
    language  Language
    createdAt DateTime @default(now())
    postId    String
    Post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@index([postId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                 String            @id @default(cuid())
    name               String?
    email              String?           @unique
    emailVerified      DateTime?
    image              String?
    createdAt          DateTime          @default(now())
    updatedAt          DateTime?         @updatedAt
    accounts           Account[]
    sessions           Session[]
    communities        Community[]       @relation("CommunityMembers")
    createdCommunities Community[]
    posts              Post[]
    comments           Comment[]
    postReactions      PostReaction[]
    commentReactions   CommentReaction[]
    followingTopics    Topic[]           @relation("UserFollowingTopics")
    following          User[]            @relation("Following")
    followers          User[]            @relation("Following")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
