// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Community {
    name        String   @id
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    creatorId   String
    creator     User     @relation(fields: [creatorId], references: [id])
    members     User[]   @relation("CommunityMembers")
    posts       Post[]

    @@index([creatorId])
}

model Topic {
    name      String   @id
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    posts     Post[]   @relation("PostTopics")
}

model Post {
    id            String    @id @default(cuid())
    title         String
    content       String    @db.VarChar(1000)
    createdAt     DateTime  @default(now())
    creatorId     String
    communityName String
    creator       User      @relation(fields: [creatorId], references: [id])
    community     Community @relation(fields: [communityName], references: [name])
    topics        Topic[]   @relation("PostTopics")

    @@index([creatorId])
    @@index([communityName])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id                 String      @id @default(cuid())
    name               String?
    email              String?     @unique
    emailVerified      DateTime?
    image              String?
    createdAt          DateTime    @default(now())
    updatedAt          DateTime?   @updatedAt
    accounts           Account[]
    sessions           Session[]
    communities        Community[] @relation("CommunityMembers")
    createdCommunities Community[]
    posts              Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
